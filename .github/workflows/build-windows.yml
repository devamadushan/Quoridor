name: Build Quoridor Windows Executable

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type de build'
        required: true
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'debug'
          - 'installer'

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        java: [21]
      fail-fast: false

    env:
      MAVEN_OPTS: "-Xmx2048m -XX:+UseG1GC"
      JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF-8"

    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üì¶ Setup Java JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        architecture: x64
        cache: maven

    - name: üîß Configure Git for Windows
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - name: üìä Display System Information
      run: |
        echo "=== SYSTEM INFORMATION ==="
        systeminfo | findstr /C:"OS Name" /C:"OS Version" /C:"Total Physical Memory"
        java -version
        mvn -version
        echo "=== ENVIRONMENT VARIABLES ==="
        echo "JAVA_HOME: $env:JAVA_HOME"
        echo "PATH: $env:PATH"
        echo "Working Directory: $PWD"
        echo "=========================="

    - name: üßπ Clean Previous Build Artifacts
      run: |
        echo "Nettoyage des artefacts pr√©c√©dents..."
        if (Test-Path "target") { Remove-Item -Recurse -Force "target" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        echo "Nettoyage termin√©."

    - name: ‚úÖ Validate Maven Configuration
      run: |
        echo "Validation de la configuration Maven..."
        mvn help:effective-pom -Doutput=effective-pom.xml
        mvn help:effective-settings
        if (Test-Path "effective-pom.xml") {
          echo "Fichier POM effectif cr√©√© avec succ√®s"
        } else {
          echo "Erreur: Impossible de cr√©er le POM effectif"
          exit 1
        }

    - name: üì• Download Dependencies
      run: |
        echo "T√©l√©chargement des d√©pendances..."
        mvn dependency:resolve -B -V
        mvn dependency:resolve-sources -B
        echo "D√©pendances t√©l√©charg√©es avec succ√®s"

    - name: üîç Verify JavaFX Modules
      run: |
        echo "V√©rification des modules JavaFX..."
        mvn dependency:tree | findstr javafx
        echo "=== MODULES JAVAFX DETECTES ==="
        $javaHome = $env:JAVA_HOME
        $jmodsPath = "$javaHome\jmods"
        if (Test-Path $jmodsPath) {
          echo "JMods trouv√©s dans: $jmodsPath"
          Get-ChildItem "$jmodsPath\javafx*" | ForEach-Object { echo $_.Name }
        } else {
          echo "Aucun JMods trouv√©, t√©l√©chargement de JavaFX..."
          mvn org.openjfx:javafx-maven-plugin:0.0.8:help
        }

    - name: üß™ Run Tests
      run: |
        echo "Ex√©cution des tests..."
        mvn test -B -Dtest.parallel=true -Dmaven.test.failure.ignore=false
      continue-on-error: false

    - name: üìã Generate Test Report
      if: always()
      run: |
        if (Test-Path "target/surefire-reports") {
          echo "=== RAPPORT DE TESTS ==="
          Get-ChildItem "target/surefire-reports/*.xml" | ForEach-Object {
            $content = Get-Content $_.FullName
            if ($content -match 'failures="([^"]*)"') {
              $failures = $matches[1]
              echo "Fichier: $($_.Name) - √âchecs: $failures"
            }
          }
        }

    - name: üèóÔ∏è Compile and Package
      run: |
        echo "Compilation et empaquetage..."
        mvn clean compile -B -V
        mvn package -B -DskipTests=true
        
        echo "V√©rification des artefacts g√©n√©r√©s..."
        if (Test-Path "target/*.jar") {
          Get-ChildItem "target/*.jar" | ForEach-Object {
            $size = [math]::Round($_.Length / 1MB, 2)
            echo "JAR: $($_.Name) - Taille: ${size}MB"
          }
        } else {
          echo "ERREUR: Aucun JAR g√©n√©r√©"
          exit 1
        }

    - name: üîß Create Custom Runtime with jlink
      run: |
        echo "Cr√©ation du runtime personnalis√©..."
        $javaHome = $env:JAVA_HOME
        $jlinkPath = "$javaHome\bin\jlink.exe"
        
        if (Test-Path $jlinkPath) {
          echo "Utilisation de jlink: $jlinkPath"
          
          # Cr√©er le runtime avec les modules n√©cessaires
          & $jlinkPath `
            --module-path "$javaHome\jmods" `
            --add-modules java.base,java.desktop,java.logging,java.xml,java.naming,java.security.sasl,java.security.jgss,java.net.http,javafx.controls,javafx.fxml,javafx.web,javafx.swing,javafx.media `
            --output "target/runtime" `
            --compress=2 `
            --no-header-files `
            --no-man-pages `
            --strip-debug
            
          if (Test-Path "target/runtime") {
            $runtimeSize = (Get-ChildItem "target/runtime" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            echo "Runtime cr√©√© avec succ√®s - Taille: $([math]::Round($runtimeSize, 2))MB"
          } else {
            echo "ERREUR: √âchec de la cr√©ation du runtime"
            exit 1
          }
        } else {
          echo "ERREUR: jlink non trouv√© dans $jlinkPath"
          exit 1
        }

    - name: üì¶ Create Windows Executable with jpackage
      run: |
        echo "Cr√©ation de l'ex√©cutable Windows..."
        $buildType = "${{ github.event.inputs.build_type }}"
        if ([string]::IsNullOrEmpty($buildType)) { $buildType = "release" }
        
        echo "Type de build: $buildType"
        
        # Ex√©cuter jpackage
        mvn org.panteleyev:jpackage-maven-plugin:1.6.0:jpackage -B
        
        # V√©rifier la cr√©ation de l'ex√©cutable
        if (Test-Path "target/dist") {
          echo "=== CONTENU DU R√âPERTOIRE DIST ==="
          Get-ChildItem "target/dist" -Recurse | ForEach-Object {
            if ($_.PSIsContainer) {
              echo "üìÅ $($_.FullName.Replace($PWD, '.'))"
            } else {
              $size = [math]::Round($_.Length / 1MB, 2)
              echo "üìÑ $($_.FullName.Replace($PWD, '.')) - ${size}MB"
            }
          }
          
          # Chercher l'ex√©cutable principal
          $exeFiles = Get-ChildItem "target/dist" -Filter "*.exe" -Recurse
          if ($exeFiles.Count -gt 0) {
            $mainExe = $exeFiles[0]
            $exeSize = [math]::Round($mainExe.Length / 1MB, 2)
            echo "‚úÖ Ex√©cutable principal cr√©√©: $($mainExe.Name) - ${exeSize}MB"
            
            # Test de l'ex√©cutable (version uniquement)
            echo "Test de l'ex√©cutable..."
            try {
              $version = & $mainExe.FullName --version 2>&1
              echo "Version d√©tect√©e: $version"
            } catch {
              echo "‚ö†Ô∏è Impossible de tester l'ex√©cutable (normal pour jpackage)"
            }
          } else {
            echo "‚ùå ERREUR: Aucun ex√©cutable trouv√©"
            exit 1
          }
        } else {
          echo "‚ùå ERREUR: R√©pertoire dist non cr√©√©"
          exit 1
        }

    - name: üéØ Create Installer (if requested)
      if: github.event.inputs.build_type == 'installer' || startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Cr√©ation de l'installateur Windows..."
        # Modifier temporairement le pom.xml pour cr√©er un MSI
        $pomContent = Get-Content "pom.xml" -Raw
        $newPomContent = $pomContent -replace '<type>EXE</type>', '<type>MSI</type>'
        Set-Content "pom.xml" -Value $newPomContent
        
        # Cr√©er l'installateur
        mvn org.panteleyev:jpackage-maven-plugin:1.6.0:jpackage -B
        
        # Restaurer le pom.xml original
        Set-Content "pom.xml" -Value $pomContent
        
        if (Test-Path "target/dist/*.msi") {
          $msiFile = Get-ChildItem "target/dist/*.msi" | Select-Object -First 1
          $msiSize = [math]::Round($msiFile.Length / 1MB, 2)
          echo "‚úÖ Installateur MSI cr√©√©: $($msiFile.Name) - ${msiSize}MB"
        }

    - name: üìä Generate Build Summary
      if: always()
      run: |
        echo "=== R√âSUM√â DE BUILD ==="
        echo "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        echo "Java Version: ${{ matrix.java }}"
        echo "Build Type: ${{ github.event.inputs.build_type }}"
        echo "Git Ref: ${{ github.ref }}"
        echo "Git SHA: ${{ github.sha }}"
        
        if (Test-Path "target") {
          $targetSize = (Get-ChildItem "target" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          echo "Taille totale target: $([math]::Round($targetSize, 2))MB"
        }
        
        echo "=== ARTEFACTS G√âN√âR√âS ==="
        if (Test-Path "target/dist") {
          Get-ChildItem "target/dist" -File | ForEach-Object {
            $size = [math]::Round($_.Length / 1MB, 2)
            echo "üì¶ $($_.Name) - ${size}MB"
          }
        }
        echo "======================="

    - name: üì§ Upload Windows Executable
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: quoridor-windows-executable-java${{ matrix.java }}
        path: |
          target/dist/*.exe
          target/dist/Quoridor/**
        retention-days: 30
        compression-level: 6

    - name: üì§ Upload Windows Installer
      uses: actions/upload-artifact@v4
      if: success() && (github.event.inputs.build_type == 'installer' || startsWith(github.ref, 'refs/tags/'))
      with:
        name: quoridor-windows-installer-java${{ matrix.java }}
        path: target/dist/*.msi
        retention-days: 30

    - name: üì§ Upload JAR Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: quoridor-jar-java${{ matrix.java }}
        path: |
          target/*.jar
          !target/*-sources.jar
          !target/*-javadoc.jar
        retention-days: 15

    - name: üì§ Upload Build Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-java${{ matrix.java }}
        path: |
          target/surefire-reports/**
          effective-pom.xml
          *.log
        retention-days: 7

    - name: üöÄ Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v1
      with:
        name: Quoridor ${{ github.ref_name }}
        body: |
          ## üéÆ Quoridor ${{ github.ref_name }}
          
          ### üì¶ T√©l√©chargements
          - **Ex√©cutable Windows** : `Quoridor.exe` - Ex√©cutable autonome avec JRE int√©gr√©
          - **JAR Ex√©cutable** : `quoridor-${{ github.ref_name }}.jar` - N√©cessite Java 21+
          
          ### ‚ú® Nouveaut√©s
          - Interface JavaFX optimis√©e
          - Intelligence artificielle am√©lior√©e
          - Performances optimis√©es
          - Ex√©cutable standalone sans d√©pendances
          
          ### üîß Configuration Requise
          - **Windows** : Windows 10/11 (64-bit)
          - **M√©moire** : 512 MB RAM minimum, 1 GB recommand√©
          - **Espace disque** : 200 MB d'espace libre
          
          ### üöÄ Installation
          1. T√©l√©charger `Quoridor.exe`
          2. Ex√©cuter l'installateur
          3. Lancer le jeu depuis le menu D√©marrer ou le raccourci bureau
          
          ---
          *Build automatique via GitHub Actions*
        files: |
          target/dist/*.exe
          target/dist/*.msi
          target/*.jar
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job de notification
  notify:
    runs-on: ubuntu-latest
    needs: [build-windows]
    if: always()
    
    steps:
    - name: üì¢ Build Notification
      run: |
        if [ "${{ needs.build-windows.result }}" == "success" ]; then
          echo "‚úÖ Build Windows r√©ussi!"
          echo "Artefacts disponibles dans la section Actions"
        else
          echo "‚ùå √âchec du build Windows"
          echo "V√©rifiez les logs pour plus de d√©tails"
        fi 